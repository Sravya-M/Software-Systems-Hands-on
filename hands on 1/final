/* MT2019114
Soft link can be used across file systems
symlink(filepath,linkname)
*/

#include<unistd.h>
#include<fcntl.h>
#include<stdio.h>

int main()
{
	int ret = symlink("test.txt","mysoft");
	printf("%d\n",ret);

	return 0;
}
ln -s "test.txt" "mysoft1"
/* MT2019114
Hard link is used within a file system 
link(oldpath,newpath)
*/

#include<unistd.h>
#include<fcntl.h>
#include<stdio.h>

int main()
{
	int ret = link("test.txt","hard.txt");
	printf("%d\n",ret);

	return 0;
}
ln "test.txt" "hard1.txt"
/* MT2019114
mkfifo(pathname,mode)
returns 0 on success, -1 if it already exists
we can check from terminal by echo and cat
*/

#include<unistd.h>
#include<fcntl.h>
#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>

int main()
{
	int ret = mkfifo("myfifo",0744);
	printf("%d\n",ret);

	return 0;
}
mkfifo "myfifo1"
/* MT2019114
	go /proc/processid
	open "status" file and check
*/
#include<stdio.h>

int main()
{
	int a;
	for( ;; )
	{
		a=0;
	}

	return 0;
}
/* MT2019114
create a file and print the fd value
It will return the least unused file descriptor in the table (3)
*/

#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>

int main()
{
	int fd=creat("3test.txt",0744);
	printf("%d\n",fd);
	return 0;
}
/* MT2019114
open an existing file in read write mode (use O_EXCL)
if O_EXCL is used in conjunction with O_CREAT, and pathname already exists, then open fails with the error EEXIST
*/

#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>

int main()
{
	int fd=open("3test.txt",O_RDWR|O_CREAT|O_EXCL,0744);
	printf("%d\n",fd);
	return 0;
}
/* MT2019114
	go /proc/pid/fd
	check file descriptors
*/
#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>

int main()
{
	int a;
	creat("file1.txt",0744);
	creat("file2.txt",0744);
	creat("file3.txt",0744);
	creat("file4.txt",0744);
	creat("file5.txt",0744);
	for( ;; )
	{
		a=0;
	}

	return 0;
}
/* MT2019114
	program to read from STDIN and write to STDOUT	
*/
#include<stdio.h>
#include<unistd.h>

int main()
{
	int a;
	read(0,&a,sizeof(a));
	write(1,&a,sizeof(a));

	return 0;
}
/* Author: Sravya M, MT2019114
// cp file1 file2
// this command will overwrite the contents of file2 with file1 if file2 already exists
// if not, it will create new file2 and copy the contents of file1 to it
*/

#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>

int main(int argc, char *argv[])
{
	int fd1=open(argv[1],O_RDONLY);
	int fd2=open(argv[2],O_WRONLY|O_CREAT|O_TRUNC,0744);

	char c;

// taking a temporary variable to store read return value
// returns number of characters read, 0 when it reaches the end of file
	int count;
	count=read(fd1,&c,sizeof(char));

	while(count)
	{
		write(fd2,&c,sizeof(char));
		count=read(fd1,&c,sizeof(char));			
	}

	close(fd1);
	close(fd2);
	return 0;
}
/* MT2019114
program to read a file line by line and print on STDOUT
*/
#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>

int main(int argc, char *argv[])
{
	int fd1=open(argv[1],O_RDONLY);
	char c;

	int count;
	count=read(fd1,&c,sizeof(char));

	while(count)
	{
		if(c=='\n')
		{
			read(0,&c,sizeof(char));
			count=read(fd1,&c,sizeof(char));			
		}
		else
		{
		write(1,&c,sizeof(char));
		count=read(fd1,&c,sizeof(char));			
		}
		
	}

	close(fd1);
	return 0;
}
/* MT2019114
to print the details about files from stat
*/
#include<sys/types.h>
#include<stdio.h>
#include<unistd.h>
#include<sys/stat.h>
#include<string.h>
#include<time.h>

int main()
{
	char c;
	struct stat s;
	stat("06.c",&s);

	printf("Pick one among a to j\n");

	while(1)
	{
		printf("Please enter a character: ");
		scanf(" %c",&c);
	
		if(c=='a')
			printf("inode number %ld",(long)s.st_ino);
		else if(c=='b')
			printf("No of hard links %ld",(long)s.st_nlink);
		else if(c=='c')
			printf("UID %ld",(long)s.st_uid);
		else if(c=='d')
			printf("GID %ld",(long)s.st_gid);
		else if(c=='e')
			printf("Size %ld",(long)s.st_size);
		else if(c=='f')
			printf("Block size %ld",(long)s.st_blksize);
		else if(c=='g')
			printf("Number of blocks %lld",(long long)s.st_blocks);
		else if(c=='h')
			printf("Time of last access %s", ctime(&s.st_atime));
		else if(c=='i')
			printf("Time of last modification %s",ctime(&s.st_mtime));
		else if(c=='j')
			printf("Time of status change %s",ctime(&s.st_ctime));
		else
			break;
		printf("\n");

	}
	return 0;
}
/*Author: Sravya. M (MT2019114)
Program to check a. return value of lseek(fd,bytes,flag), which moves the pointer, b. open destination file using od command (octal dump) for empty spaces
od -c destfile
*/

#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>

int main()
{
	int fd=open("10test.txt",O_RDWR|O_CREAT,0744);
	int fd1=open("09.c",O_RDONLY);
	char c[10]="helloworld";
	int ret;

	write(fd,&c,10);
	ret=lseek(fd,10,SEEK_CUR);
	write(fd,&c,10);

// lseek returns the current position in file it is pointing to (Here it is 20)
	printf("%d",ret);

	return 0;
}
/*Author: Sravya. M (MT2019114)
newfd = dup(oldfd);
Assigns newfd with the least unused file descriptor in the file descriptor table
*/

#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>
#include<string.h>

int main()
{
	int fd=open("11test.txt",O_RDWR | O_APPEND,0744);
	int fd1=dup(fd);

	printf("%d ",fd);  		// 11test.txt
	printf("%d ",fd1);		// 11test.txt using dup

// writing into different file descriptors (which are pointing to the same file)
	write(fd, "base\n", strlen("base\n"));
	write(fd1, "dup\n", strlen("dup\n"));

	close(fd);
	close(fd1);
	
	return 0;
}
/*Author: Sravya. M (MT2019114)
newfd = dup2(oldfd,newfd);
It will close the file pointed by newfd and keeps the same fd which points to old file now
*/

#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>
#include<string.h>

int main()
{
	int fd=open("11test.txt",O_RDWR | O_APPEND,0744);
	int fd2=open("10test.txt",O_RDWR,0744);

	printf("%d ",fd);  		// 11test.txt
	printf("%d ",fd2);		// 10test.txt using dup2
	
	fd2=dup2(fd,fd2);		// duping fd2 to fd

// writing into different file descriptors (which are pointing to the same file
	write(fd, "base\n", strlen("base\n"));
	write(fd2, "dup2\n", strlen("dup2\n"));

	close(fd);
	close(fd2);
	
	return 0;
}
/*Author: Sravya. M (MT2019114)
fcntl(fd,F_DUPFD,0);   // what is the role of 0 here?
fcntl(fd,F_GETFD);
fcntl(fd,F_SETFD);
*/

#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>
#include<string.h>

int main()
{
	int fd=open("11test.txt",O_RDWR | O_APPEND,0744);
	int fd3=fcntl(fd,F_DUPFD,0);

	printf("%d ",fd);  		// 11test.txt
	printf("%d ",fd3);		// 11test.txt using fcntl

// writing into different file descriptors (which are pointing to the same file
	write(fd, "base\n", strlen("base\n"));
	write(fd3, "fcntl\n", strlen("fcntl\n"));
	
	close(fd);
	close(fd3);

	return 0;
}
/*Author: Sravya. M (MT2019114)
to find out the opening mode of a file
return value of fcntl for the access modes
32768 for O_RDONLY
32769 for O_WRONLY
32770 for O_RDWR
bitwise AND with O_ACCMODE to get 0,1,2 respectively
*/

#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>

int main()
{
	int mode;
	int fd=open("10test.txt",O_WRONLY|O_CREAT,0744);

	mode = fcntl(fd,F_GETFL);
	mode = mode & O_ACCMODE;

	printf("Access mode is ");
	if(mode==O_WRONLY)
		printf("write only");
	else if(mode==O_RDONLY)
		printf("read only");
	else if(mode==O_RDWR)
		printf("read write");
	else
		printf("ERROR: please check");

	close(fd);
	return 0;
}
/* MT2019114
making STDIN wait for 10 sec using "select"
int select(int nfds, fd_set *rfds, fd_set *wfds, fd_set *exceptfds, struct timeval *timeout)
*/

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/select.h>

int main()
{
	fd_set rfds;
	struct timeval t;
	int retval;

// watching stdin for inputs
	FD_ZERO(&rfds);
	FD_SET(0,&rfds);

// asking to wait for 5sec
	t.tv_sec=10;

	retval=select(1,&rfds, NULL,NULL, &t);
	if(retval)
		printf("Data available\n");
	else
		printf("No data");

	return 0;
}
/*MT2019114
	S_IFMT is a bitmask to get file type from st_mode
	man pages:
	file type flags: inode(7)
	stat structure: stat(2)

	POSIX functions are also there to check the file type
	ex: S_ISREG(s.st_mode)
*/

#include<stdio.h>
#include<unistd.h>
#include<sys/stat.h>

int main(int argc, char **argv)
{
	unsigned long int type;
	struct stat s;
	stat(argv[1],&s);

	printf("%d \n",s.st_mode);

// bit wise AND of st_mode , S_IFMT to get only the file type
	type=s.st_mode & S_IFMT;

	switch(type)
	{
		case S_IFREG:
			printf("Regular file\n");
			break;
		case S_IFLNK:
			printf("symbolic link\n");
			break;
		case S_IFBLK:
			printf("block device\n");
			break;
		case S_IFDIR:
			printf("directory\n");
			break;
		case S_IFIFO:
			printf("named pipe or FIFO\n");
			break;
		case S_IFCHR:
			printf("character device\n");
			break;
		case S_IFSOCK:
			printf("socket\n");
			break;
	}

	return 0;
}
/* MT2019114
print USER using environ
*/

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>

// we have to explicitely mention this in order to use environ
extern char **environ;

int main()
{
	char *ex="USER";

// using getenv(env variable) function
	char *a=getenv(ex);
	printf("%s\n",a);

// using environ strings
	int i=0;
	while(environ[i])
	{
		if(strncmp(ex,environ[i],4)==0)
		{
			printf("%s\n",environ[i]);
			return 0;
		}
		i++;
	}
	return 0;
}
/* MT2019114
Mandatory locking: write lock
*/

#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>

int main()
{
	struct flock rlock;

	int fd=open("test.txt",O_WRONLY,0744);
	rlock.l_type=F_WRLCK;
	rlock.l_whence=SEEK_SET;
	rlock.l_start=0;
	rlock.l_len=0;
	rlock.l_pid=getpid();

	fcntl(fd,F_SETLKW,&rlock);
	lseek(fd,0,SEEK_END);

	write(fd,"write lock",sizeof("write lock")-1);

	getchar();

	rlock.l_type=F_UNLCK;
	fcntl(fd,F_SETLKW,&rlock);
	
	return 0;	
}
/* MT2019114
Mandatory locking: read lock
*/

#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>

int main()
{
	struct flock rlock;

	int fd=open("test.txt",O_RDONLY,0744);

	rlock.l_type=F_RDLCK;
	rlock.l_whence=SEEK_SET;
	rlock.l_start=0;
	rlock.l_len=20;
	rlock.l_pid=getpid();

	fcntl(fd,F_SETLKW,&rlock);

	char c[50];
	read(fd,&c,50);
	printf("%s",c);

	getchar();

	rlock.l_type=F_UNLCK;
	fcntl(fd,F_SETLKW,&rlock);
	
	return 0;	
}
#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>

// for application purpose, i.e., incrementing the ticket number and updating it

int main()
{
	struct ticket
	{
	int tno;
	}t;

	int fd=open("ticket.txt",O_RDWR,0744);

// set the locking parameters
	struct flock rlock;
	rlock.l_type=F_WRLCK;
	rlock.l_whence=SEEK_SET;
	rlock.l_start=0;
	rlock.l_len=0;
	rlock.l_pid=getpid();

	read(fd,&t,sizeof(t));

// locking
	fcntl(fd,F_SETLKW,&rlock);
// CS - Critical Section
	t.tno++;

	lseek(fd,0,SEEK_SET);
	write(fd,&t,sizeof(t));
// CS

// unlocking
	rlock.l_type=F_UNLCK;
	fcntl(fd,F_SETLKW,&rlock);

	
	printf("%d\n",t.tno);
	close(fd);
	
	return 0;	
}
#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>

// for db purpose, adding a ticket number

struct ticket
{
	int tno;
};

int main()
{
	struct ticket t;
	t.tno=10;

	int fd=open("ticket.txt",O_CREAT|O_RDWR,0744);

	write(fd,&t,sizeof(t));
	read(fd,&t,sizeof(t));

	printf("%d\n",t.tno);
	close(fd);

	return 0;
}
/* MT2019114
Locking a particular record by setting proper values for l_start, l_len
*/

#include<unistd.h>
#include<fcntl.h>
#include<stdio.h>
#include<string.h>

int main (){
	struct record{
		char name[10];
		int marks;
	}r[3];

	int n;
	int fd = open("db.txt",O_RDWR);

	printf("Enter the record to be locked ");
	scanf("%d",&n);

// setting lock parameters
	struct flock lock;
	lock.l_type=F_WRLCK;
	lock.l_whence=SEEK_SET;
	lock.l_start=(n-1)*sizeof(r);
	lock.l_len=sizeof(r);
	lock.l_pid=getpid();

	int st = fcntl(fd,F_SETLKW,&lock);

// CS of nth record
	read(fd,&r,sizeof(r));
	r[n-1].marks +=1;
	lseek(fd,0,SEEK_SET);
	write(fd,&r,sizeof(r));
// CS
	lock.l_type=F_UNLCK;
	fcntl(fd,F_SETLK,&lock);

	close(fd);

	fd = open("db.txt",O_RDONLY);
	read(fd,&r,sizeof(r));
	printf("Name : %s Marks : %d\n",r[0].name,r[0].marks);
	printf("Name : %s Marks : %d\n",r[1].name,r[1].marks);
	printf("Name : %s Marks : %d\n",r[2].name,r[2].marks);
	close(fd);

	return 0;
}
/* MT2019114
creating few records in database
*/

#include<unistd.h>
#include<fcntl.h>
#include<stdio.h>
#include <string.h>

struct record{
	char name[10];
	int marks;
	}r[3];

int main (){

	int fd = open("db.txt",O_CREAT|O_RDWR,0744);

// initialization of records
	strcpy(r[0].name,"student1");
	strcpy(r[1].name,"student2");
	strcpy(r[2].name,"student3");	
	r[0].marks = 50;
	r[1].marks = 47;
	r[2].marks = 49;

// writing into the db.txt file
	write(fd,&r,sizeof(r));
	close(fd);

	fd = open("db.txt",O_RDONLY);
	read(fd,&r,sizeof(r));
	printf("Name : %s Marks : %d\n",r[0].name,r[0].marks);
	printf("Name : %s Marks : %d\n",r[1].name,r[1].marks);
	printf("Name : %s Marks : %d\n",r[2].name,r[2].marks);

	close(fd);
	return 0;
}
/* MT2019114
	finding the time taken by getpid()
*/
#include<stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include<sys/time.h>
#include<time.h>

static __inline__ unsigned long long rdtsc()
{
    unsigned long long int x;
    __asm__ volatile (".byte 0x0f, 0x31" : "=A" (x));
    return x;
}

int main () {
    int nsec;
    unsigned long long int stime, etime;
    stime = rdtsc();
      getpid();
    etime = rdtsc();
    nsec = (etime-stime)/1.8;

    printf("Difference using time stamp counter is : %d nsec \n", nsec);
    return 0;
}
/* MT2019114
get the priority of your process and change it using nice
1. getpriority(which, who) returns nice value of the current calling thread when who=0
2. nice(incr)  = adds incr value to nice value of calling thread

1. ps -o ni,pri 6742 2. we can check in stat file too
For making nice to a -ve value, use sudo (i.e., for incrementing the priority)
*/

#include<stdio.h>
#include<unistd.h>
#include<sys/resource.h>
#include<sys/time.h>

int main()
{
	int a=getpriority(PRIO_PROCESS,0);
	printf("%d\n",a);

	a=nice(-3);
	printf("%d\n",a);

	return 0;
}
/* MT2019114
	fork - printing parent and child ids
*/
#include<stdio.h>
#include<unistd.h>

int main()
{
	if(!fork())
		printf("child id is %d\n",getpid());
	else
		printf("parent id is %d\n",getpid());
	return 0;
}
/*MT2019114
program to open a file and write from parent and child
*/

#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<fcntl.h>
#include<sys/types.h>

int main()
{
	int fd=open("22.txt",O_CREAT|O_TRUNC|O_RDWR,0744);
	pid_t pid=fork();

	if(pid==0)
		write(fd,"CHILD\n",strlen("CHILD\n"));
	else
		write(fd,"parent\n",strlen("parent\n"));

	close(fd);
	return 0;
}
parent
CHILD
/* MT2019114
zombie process
If a child process gets finished before the parent process, it will be a zombie i.e., its entry will be there in process table as it has to return to parent process
ps -ef|grep a.out // to check the defunct/zombie process
*/

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>

int main()
{
	int a=fork();
	if(a==0)
		exit(0);
	else if(a>0)
		sleep(50); // we can also use wait()
	return 0;
}
/* MT2019114
Orphan process
If parent process is terminated before child process's execution, then the child process will become an orphan process
*/

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>

int main()
{
	int a=fork();
	if(a==0)
		sleep(30);
	else if(a>0)
	{}	
	return 0;
}
/* MT2019114
program for the parent to wait for a particular child
waitpid(pid,int *status,int options)
*/

#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>
#include<sys/types.h>

int main()
{
	int c1,c2,c3;
	int status;

	if(!(c1=fork()))
		sleep(2);
	else if(!(c2=fork()))
		sleep(6);
	else if(!(c3=fork()))
		sleep(10);
	else
	{
		waitpid(c2,&status,0);
		printf("%d ",status);
	}

	return 0;
}
/* MT2019114
pass input to an executable file
just printing all the command line arguments
*/

#include<stdio.h>

int main(int argc, char **argv)
{
	for(int fo=0;fo<argc;fo++)
		printf("%s\n",argv[fo]);

	return 0;
}
/* MT2019114 
execute ls -Rl using execl
execl = 
*/

#include<stdio.h>
#include<unistd.h>

int main()
{
        execl("/bin/ls","ls","-Rl",(char *)0);

	return 0;
}
/* MT2019114 
execute ls -Rl using execlp
execlp = 
*/

#include<stdio.h>
#include<unistd.h>

int main()
{
        execlp("ls","ls","-Rl",(char *)0);

	return 0;
}
/* MT2019114 
execute ls -Rl using execle
execle = 
*/

#include<stdio.h>
#include<unistd.h>

int main()
{
	char *env[] = { "HOME=/usr/home", "LOGNAME=home", (char *)0 };
        execle("/bin/ls","ls","-Rl",(char *)0,env);

	return 0;
}
/* MT2019114 
execute ls -Rl using execv
execv = 
*/

#include<stdio.h>
#include<unistd.h>

int main()
{
	char *args[] = {"ls","-Rl",(char *)0};
        execv("/bin/ls",args);

	return 0;
}
/* MT2019114 
execute ls -Rl using execvp
execvp = 
*/

#include<stdio.h>
#include<unistd.h>

int main()
{
	char *args[] = {"ls","-Rl",(char *)0};
        execvp("ls",args);

	return 0;
}
/*
man sched
man sched_get_priority_max(sched policy)
get max and min real time priority
As real time system uses FIFO and RR, I am displaying them
*/

#include<stdio.h>
#include<sched.h>

int main()
{
	int pmin=sched_get_priority_min(SCHED_FIFO);
	int pmax=sched_get_priority_max(SCHED_FIFO);

	printf("pmin: %d, pmax: %d\n",pmin,pmax);
	return 0;
}
/*
man sched
sched_getscheduler()
SCHED_OTHER  // standard round robin time sharing policy 0
SCHED_FIFO   // first in first out 1
SCHED_RR     // round robin policy 2
sched_setscheduler()
*/

#include<stdio.h>
#include<sched.h>
#include<unistd.h>

int main()
{
	struct sched_param param;
	param.sched_priority=99;

	pid_t id=getpid();
	int sc = sched_getscheduler(id);

	printf("%d\n",sc);
	
	sched_setscheduler(id,SCHED_RR,&param);
	sc=sched_getscheduler(id);
	printf("RR %d\n",sc);

	sched_setscheduler(id,SCHED_FIFO,&param);
	sc=sched_getscheduler(id);
	printf("FIFO %d\n",sc);
		
	return 0;
}
/* MT2019114
make it an orphan process
create a new sesson for it
give full permissions
executed as background
*/

#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

int main(void) {
        
// Our process ID and Session ID
        pid_t pid, sid;
        
        pid = fork();
        if (pid < 0)
                exit(0);

// If we got a good PID, then we can exit the parent process.
        if (pid > 0) {
		printf("child id is %d\n",pid);
                exit(0);
        }

// changing the file mode mask
        umask(0);    
                
// Create a new SID for the child process
        sid = setsid();
        if (sid < 0)
                exit(0);
        
	//chdir("/")
      
// closing standard fds
        close(0);
        close(1);
        close(2);
        
// Daemon-specific initialization goes here 
        
	int fd=open("30test.txt",O_CREAT|O_RDWR|O_TRUNC,0777);
        while (1) {
	           sleep(4);
		write(fd,"process run by daemon\n",strlen("process run by daemon\n"));
        }
	close(fd);

   	exit(0);
}
